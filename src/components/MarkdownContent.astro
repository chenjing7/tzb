---
import { marked } from 'marked';
import '../styles/markdownShared.css';

interface Props {
  content: string; // Raw markdown content
}

const { content } = Astro.props;

// Parse the markdown to HTML
const html = await marked.parse(content);
---

<div class="markdown-content prose prose-slate max-w-none" id="markdown-container">
  <div id="markdown-content" set:html={html} />
</div>

<script>
  // Track if tables have been enhanced
  let tablesEnhanced = false;
  
  // Initialize on DOM load
  document.addEventListener('DOMContentLoaded', () => {
    if (!tablesEnhanced) {
      enhanceMarkdownTables();
      tablesEnhanced = true;
    }
  });
  
  // Also handle client-side navigation (Astro View Transitions)
  document.addEventListener('astro:page-load', () => {
    // Reset the flag on page navigation
    tablesEnhanced = false;
    
    if (!tablesEnhanced) {
      enhanceMarkdownTables();
      tablesEnhanced = true;
    }
  });
  
  // Clean up resources when navigating away to prevent memory leaks
  document.addEventListener('astro:before-preparation', () => {
    // Reset the flag
    tablesEnhanced = false;
    
    // Clean up table modals and buttons
    document.querySelectorAll('.table-modal-overlay').forEach(modal => {
      modal.remove();
    });
    document.querySelectorAll('.view-full-table').forEach(button => {
      button.remove();
    });
  });
  
  /**
   * Initialize and enhance markdown tables after the content is loaded
   */
  function enhanceMarkdownTables() {
    const tables = document.querySelectorAll('.markdown-content table');
    
    tables.forEach((table, index) => {
      // Skip if table is already enhanced
      if (table.closest('.table-container')) {
        return;
      }
      
      // Add container for better scrolling
      const container = document.createElement('div');
      container.className = 'table-container';
      container.setAttribute('data-table-container', '');
      container.setAttribute('data-table-id', `table-${index}`);
      
      // Wrap table in container
      if (table.parentNode) {
        table.parentNode.insertBefore(container, table);
        container.appendChild(table);
      }
      
      // Add view full table button for large tables
      if ((table as HTMLTableElement).rows.length > 5) {
        container.classList.add('large-table');
        const viewButton = document.createElement('button');
        viewButton.className = 'view-full-table';
        viewButton.setAttribute('data-view-table', '');
        viewButton.innerHTML = `
          <span>查看完整表格</span>
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M8 3H5a2 2 0 0 0-2 2v3"></path>
            <path d="M21 8V5a2 2 0 0 0-2-2h-3"></path>
            <path d="M3 16v3a2 2 0 0 0 2 2h3"></path>
            <path d="M16 21h3a2 2 0 0 0 2-2v-3"></path>
          </svg>
        `;
        container.appendChild(viewButton);
        
        // Create modal for full table view
        const modal = document.createElement('div');
        modal.className = 'table-modal-overlay';
        modal.setAttribute('data-table-modal', `table-${index}`);
        modal.innerHTML = `
          <div class="table-modal">
            <div class="table-modal-header">
              <h3 class="table-modal-title">完整表格</h3>
              <button class="table-modal-close" data-close-modal>&times;</button>
            </div>
            <div class="table-modal-content">
              ${table.outerHTML}
            </div>
          </div>
        `;
        document.body.appendChild(modal);
      }
    });
    
    // Initialize table modals
    initTableModals();
  }
  
  function initTableModals() {
    const tableContainers = document.querySelectorAll('[data-table-container]');
    
    tableContainers.forEach(container => {
      const viewButton = container.querySelector('[data-view-table]');
      const modalId = container.getAttribute('data-table-id');
      const modal = document.querySelector(`[data-table-modal="${modalId}"]`) || 
                    container.nextElementSibling;
      
      if (viewButton && modal) {
        // Button to open modal
        viewButton.addEventListener('click', () => {
          modal.classList.add('active');
          const modalContent = modal.querySelector('.table-modal');
          if (modalContent) {
            setTimeout(() => {
              modalContent.classList.add('active');
            }, 10);
          }
          document.body.style.overflow = 'hidden';
        });
        
        // Close button and click outside to close
        const closeButton = modal.querySelector('[data-close-modal]');
        if (closeButton) {
          closeButton.addEventListener('click', () => {
            closeModal(modal);
          });
        }
        
        // Close when clicking overlay (outside the modal content)
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            closeModal(modal);
          }
        });
        
        // Close on escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && modal.classList.contains('active')) {
            closeModal(modal);
          }
        });
      }
    });
    
    function closeModal(modal: Element) {
      const modalContent = modal.querySelector('.table-modal');
      if (modalContent) {
        modalContent.classList.remove('active');
      }
      setTimeout(() => {
        modal.classList.remove('active');
        document.body.style.overflow = '';
      }, 300);
    }
  }
</script>

<style is:global>
  .markdown-content {
    line-height: 1.8;
    color: #2c3e50;
  }
  
  /* Typography */
  .markdown-content h1,
  .markdown-content h2,
  .markdown-content h3,
  .markdown-content h4,
  .markdown-content h5,
  .markdown-content h6 {
    font-weight: 600;
    line-height: 1.3;
    margin-top: 1.8em;
    margin-bottom: 1em;
    color: #1a202c;
  }
  
  .markdown-content h1 {
    font-size: 1.875rem;
  }
  
  .markdown-content h2 {
    font-size: 1.5rem;
    color: #2d3748;
  }
  
  .markdown-content h3 {
    font-size: 1.25rem;
    color: #4a5568;
  }
  
  .markdown-content p {
    margin: 0 0 1.25rem 0;
    color: #4a5568;
  }
  
  .markdown-content ul,
  .markdown-content ol {
    margin: 0 0 1.25rem 1.5rem;
    padding: 0;
  }
  
  .markdown-content li {
    margin-bottom: 0.5rem;
  }
  
  .markdown-content strong {
    font-weight: 600;
    color: #2d3748;
  }
  
  /* Table Styles */
  .table-container {
    width: 100%;
    overflow-x: auto;
    margin-bottom: 1.5rem;
    position: relative;
  }
  
  .markdown-table {
    width: 100%;
    border-collapse: collapse;
    border: 1px solid #1b3660;
  }
  
  .markdown-table th,
  .markdown-table td {
    border: 1px solid #1b3660;
    padding: 0.7rem 1rem;
    text-align: left;
  }
  
  .markdown-table th {
    background-color: #f7fafc;
    font-weight: 600;
  }
  
  /* Large table handling */
  .large-table {
    position: relative;
    padding-bottom: 3rem;
  }
  
  .view-full-table {
    position: absolute;
    bottom: 0;
    right: 0;
    background-color: #4299e1;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    cursor: pointer;
    font-size: 0.875rem;
    transition: background-color 0.2s;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .view-full-table:hover {
    background-color: #3182ce;
  }

  .view-full-table svg {
    width: 14px;
    height: 14px;
  }
  
  /* Table Modal */
  .table-modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s;
  }
  
  .table-modal-overlay.active {
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
  }
  
  .table-modal {
    background-color: white;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    width: 90%;
    max-width: 1200px;
    max-height: 90vh;
    overflow: hidden;
    transform: translateY(20px);
    opacity: 0;
    transition: transform 0.3s, opacity 0.3s;
  }
  
  .table-modal.active {
    transform: translateY(0);
    opacity: 1;
  }
  
  .table-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #e2e8f0;
  }
  
  .table-modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
  }
  
  .table-modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #718096;
  }
  
  .table-modal-content {
    padding: 1.5rem;
    overflow: auto;
    max-height: calc(90vh - 4rem);
  }
</style> 